import java.util.*;
class Sort{
	void merge(int arr[], int l, int m, int r){
		int n1 = m - l + 1;
		int n2 = r - m;
		int L[] = new int [n1];
		int R[] = new int [n2];
		for (int i=0; i<n1; ++i)
			L[i] = arr[l + i];
		for (int j=0; j<n2; ++j)
			R[j] = arr[m + 1+ j];
		int i = 0, j = 0;
		int k = l;
		while (i < n1 && j < n2){
			if (L[i] <= R[j]){
				arr[k] = L[i];
				i++;
			}
            else{
				arr[k] = R[j];
				j++;
			}
			k++;
		}
		while (i < n1){
			arr[k] = L[i];
			i++;
			k++;
		}
		while (j < n2){
			arr[k] = R[j];
			j++;
			k++;
		}
	}
	void sortmerge(int arr[], int l, int r){
		if (l < r){
			int m = (l+r)/2;
			sort(arr, l, m);
			sort(arr , m+1, r);
			merge(arr, l, m, r);
		}
	}
	int partition(int arr[], int low, int high){
		int pivot = arr[high];
		int i = (low-1); 
		for (int j=low; j<high; j++){
			if (arr[j] <= pivot){
				i++;
				int temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
		}
		int temp = arr[i+1];
		arr[i+1] = arr[high];
		arr[high] = temp;
		return i+1;
	}
	void sort(int arr[], int low, int high){
		if (low < high){
			int pi = partition(arr, low, high);
			sort(arr, low, pi-1);
			sort(arr, pi+1, high);
		}
	}
	public static void main(String args[]){
                Scanner sc=new Scanner(System.in);
                System.out.println("Enter size more than 1000:");
                int n=sc.nextInt();
		int arr[] = new int[n];
		for(int i=0;i<n;i++){
                    arr[i]=(int)(Math.random()*10000);
                }
		int arr1[] = new int[n];
        for(int i=0;i<n;i++){
                    arr1[i]=arr[i];
                }
		long start=System.nanoTime();
		Sort ob = new Sort();
		ob.sort(arr, 0, n-1);
		long stop=System.nanoTime();
		long elapsed=stop-start;
		System.out.println("Start time of Quicksort:"+start);
		System.out.println("End time of Quicksort:"+stop);
		System.out.println("Execution time of Quicksort:"+elapsed);
		start=System.nanoTime();
		ob.sortmerge(arr1, 0, arr1.length-1);
		stop=System.nanoTime();
		elapsed=stop-start;
		System.out.println("Start time of Mergesort:"+start);
		System.out.println("End time of Mergersort:"+stop);
		System.out.println("Execution time of Mergesort:"+elapsed);
        		
	}
}